{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# PART 1\n",
    "\n",
    "## 1.1 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "#Write a for-loop which will read a list of any kind and print out each item in a list on a separate line.\n",
    "\n",
    "fruits = ['apples', 'pears', 'oranges', 'apricots','kiwi']\n",
    "for elem in fruits:\n",
    "    print (\"Name of the fruit is:\", elem)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Testing the loop for a different type. \n",
    "multiples_of3 = [3,6,9,12,15,18,21,24,27,30]\n",
    "for elem in multiples_of3:\n",
    "    print (\"This number is a multiple of 3:\", elem)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1.2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Method 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Start with an empty list and generate a list of integers from 0 to 5\n",
    "for i in range(0,6,1):\n",
    "    print(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Reverse the list and print it out.\n",
    "\"\"\" Instead of incrementing by 1 from 0(inclusive) to 6(exclusive), I decremented by 1 from 5(inclusive) to -1(exclusive)\"\"\"\n",
    "for i in range(5,-1,-1):\n",
    "    print(i)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Method 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Start with an empty list and generate a list of integers from 0 to 5\n",
    "myList = []\n",
    "for i in range(0,6):\n",
    "    myList.append(i)\n",
    "print(myList)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Reverse list and print it out \n",
    "\"\"\" Reversed the list using the .reverse() \"\"\"\n",
    "myList.reverse()\n",
    "print(myList)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# PART 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Dictionary provinces will use province names as a key and province abbreviation as a value.\n",
    "provinces={\"Ontario\": \"ON\", \"Quebec\":\"QC\", \"Nova Scotia\":\"NS\", \"New Brunswick\":\"NB\", \"Manitoba\":\"MB\", \"British Columbia\":\"BC\", \"Prince Edward Island\":\"PE\", \"Saskatchewan\":\"SK\", \"Alberta\":\"AB\", \"Newfoundland and Labrador\":\"NL\"}\n",
    "provinces"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Dictionary capitals will use province abbreviation as a key and a capital name as a value.\n",
    "capitals={\"ON\":\"Toronto\",\"QC\":\"Quebec City\",\"NS\":\"Halifax\",\"NB\":\"Fredericton\",\"MB\":\"Winnipeg\", \"BC\":\"Victoria\",\"PE\":\"Charlottetown\",\"SK\":\"Regina\",\"AB\":\"Edmonton\",\"NL\":\"St.John's\"}\n",
    "capitals"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Print out all combinations of the province names and the corresponding capitals.\n",
    "for province in provinces.keys():\n",
    "    for capital in capitals.keys():\n",
    "        if provinces[province] == capital:\n",
    "            print (\"The capital of \" + province + \" is \" + capitals[capital])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#Add 2-3 provinces and corresponding capitals to your dictionaries.\n",
    "provinces[\"Nortwest Territories\"]=\"NT\"\n",
    "provinces[\"Yukon\"]=\"YT\"\n",
    "capitals[\"NT\"]=\"Yelloknife\"\n",
    "capitals[\"YT\"]=\"Whitehorse\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Print out the resulting list of province/capital combinations.\n",
    "for province in provinces.keys():\n",
    "    for capital in capitals.keys():\n",
    "        if provinces[province]==capital:\n",
    "            print(\"The capital of \" + province + \" is \"+ capitals[capital])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Part 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#The Greatest Common Divisor (GCD) of a and b is the largest number that divides both of them with no remainder.\n",
    "def my_gcd(a, b):\n",
    "    while b != 0:\n",
    "        (a, b) = (abs(b), a % b)\n",
    "    return (\"The GCD of a and b is \", a)\n",
    "\n",
    "\"\"\"\n",
    "1. Pass the two numbers as arguments to a recursive function.\n",
    "2. When the second number is equal to 0, return a. \n",
    "3. Else, when b isn't equal to 0, recursively call the function with the arguments (abs(b), a % b)\n",
    "4. Print the GCD.\n",
    "7. Exit. \"\"\"\n",
    "my_gcd(39,91)\n",
    "my_gcd(20,30)\n",
    "my_gcd(40,40)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Comparing the output of your function to Python's gcd() function from math package.\n",
    "import math\n",
    "math.gcd(39,91)\n",
    "math.gcd(20,30)\n",
    "math.gcd(40,40)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
